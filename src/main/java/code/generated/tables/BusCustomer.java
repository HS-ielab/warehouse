/*
 * This file is generated by jOOQ.
 */
package code.generated.tables;


import code.generated.Keys;
import code.generated.Warehouse;
import code.generated.tables.records.BusCustomerRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BusCustomer extends TableImpl<BusCustomerRecord> {

    private static final long serialVersionUID = 1890215403;

    /**
     * The reference instance of <code>warehouse.bus_customer</code>
     */
    public static final BusCustomer BUS_CUSTOMER = new BusCustomer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BusCustomerRecord> getRecordType() {
        return BusCustomerRecord.class;
    }

    /**
     * The column <code>warehouse.bus_customer.id</code>.
     */
    public final TableField<BusCustomerRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>warehouse.bus_customer.customername</code>.
     */
    public final TableField<BusCustomerRecord, String> CUSTOMERNAME = createField(DSL.name("customername"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_customer.zip</code>.
     */
    public final TableField<BusCustomerRecord, String> ZIP = createField(DSL.name("zip"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_customer.address</code>.
     */
    public final TableField<BusCustomerRecord, String> ADDRESS = createField(DSL.name("address"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_customer.telephone</code>.
     */
    public final TableField<BusCustomerRecord, String> TELEPHONE = createField(DSL.name("telephone"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_customer.connectionpersion</code>.
     */
    public final TableField<BusCustomerRecord, String> CONNECTIONPERSION = createField(DSL.name("connectionpersion"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_customer.phone</code>.
     */
    public final TableField<BusCustomerRecord, String> PHONE = createField(DSL.name("phone"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_customer.bank</code>.
     */
    public final TableField<BusCustomerRecord, String> BANK = createField(DSL.name("bank"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_customer.account</code>.
     */
    public final TableField<BusCustomerRecord, String> ACCOUNT = createField(DSL.name("account"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_customer.email</code>.
     */
    public final TableField<BusCustomerRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_customer.fax</code>.
     */
    public final TableField<BusCustomerRecord, String> FAX = createField(DSL.name("fax"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_customer.available</code>.
     */
    public final TableField<BusCustomerRecord, Integer> AVAILABLE = createField(DSL.name("available"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>warehouse.bus_customer</code> table reference
     */
    public BusCustomer() {
        this(DSL.name("bus_customer"), null);
    }

    /**
     * Create an aliased <code>warehouse.bus_customer</code> table reference
     */
    public BusCustomer(String alias) {
        this(DSL.name(alias), BUS_CUSTOMER);
    }

    /**
     * Create an aliased <code>warehouse.bus_customer</code> table reference
     */
    public BusCustomer(Name alias) {
        this(alias, BUS_CUSTOMER);
    }

    private BusCustomer(Name alias, Table<BusCustomerRecord> aliased) {
        this(alias, aliased, null);
    }

    private BusCustomer(Name alias, Table<BusCustomerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> BusCustomer(Table<O> child, ForeignKey<O, BusCustomerRecord> key) {
        super(child, key, BUS_CUSTOMER);
    }

    @Override
    public Schema getSchema() {
        return Warehouse.WAREHOUSE;
    }

    @Override
    public Identity<BusCustomerRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BUS_CUSTOMER;
    }

    @Override
    public UniqueKey<BusCustomerRecord> getPrimaryKey() {
        return Keys.KEY_BUS_CUSTOMER_PRIMARY;
    }

    @Override
    public List<UniqueKey<BusCustomerRecord>> getKeys() {
        return Arrays.<UniqueKey<BusCustomerRecord>>asList(Keys.KEY_BUS_CUSTOMER_PRIMARY);
    }

    @Override
    public BusCustomer as(String alias) {
        return new BusCustomer(DSL.name(alias), this);
    }

    @Override
    public BusCustomer as(Name alias) {
        return new BusCustomer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BusCustomer rename(String name) {
        return new BusCustomer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BusCustomer rename(Name name) {
        return new BusCustomer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, String, String, String, String, String, String, String, String, String, Integer> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
