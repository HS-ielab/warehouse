/*
 * This file is generated by jOOQ.
 */
package code.generated.tables;


import code.generated.Keys;
import code.generated.Warehouse;
import code.generated.tables.records.BusInportRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BusInport extends TableImpl<BusInportRecord> {

    private static final long serialVersionUID = 1692083693;

    /**
     * The reference instance of <code>warehouse.bus_inport</code>
     */
    public static final BusInport BUS_INPORT = new BusInport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BusInportRecord> getRecordType() {
        return BusInportRecord.class;
    }

    /**
     * The column <code>warehouse.bus_inport.id</code>.
     */
    public final TableField<BusInportRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>warehouse.bus_inport.paytype</code>.
     */
    public final TableField<BusInportRecord, String> PAYTYPE = createField(DSL.name("paytype"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_inport.inporttime</code>.
     */
    public final TableField<BusInportRecord, LocalDateTime> INPORTTIME = createField(DSL.name("inporttime"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>warehouse.bus_inport.operateperson</code>.
     */
    public final TableField<BusInportRecord, String> OPERATEPERSON = createField(DSL.name("operateperson"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_inport.number</code>.
     */
    public final TableField<BusInportRecord, Integer> NUMBER = createField(DSL.name("number"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>warehouse.bus_inport.remark</code>.
     */
    public final TableField<BusInportRecord, String> REMARK = createField(DSL.name("remark"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_inport.inportprice</code>.
     */
    public final TableField<BusInportRecord, Double> INPORTPRICE = createField(DSL.name("inportprice"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>warehouse.bus_inport.providerid</code>.
     */
    public final TableField<BusInportRecord, Integer> PROVIDERID = createField(DSL.name("providerid"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>warehouse.bus_inport.goodsid</code>.
     */
    public final TableField<BusInportRecord, Integer> GOODSID = createField(DSL.name("goodsid"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>warehouse.bus_inport</code> table reference
     */
    public BusInport() {
        this(DSL.name("bus_inport"), null);
    }

    /**
     * Create an aliased <code>warehouse.bus_inport</code> table reference
     */
    public BusInport(String alias) {
        this(DSL.name(alias), BUS_INPORT);
    }

    /**
     * Create an aliased <code>warehouse.bus_inport</code> table reference
     */
    public BusInport(Name alias) {
        this(alias, BUS_INPORT);
    }

    private BusInport(Name alias, Table<BusInportRecord> aliased) {
        this(alias, aliased, null);
    }

    private BusInport(Name alias, Table<BusInportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> BusInport(Table<O> child, ForeignKey<O, BusInportRecord> key) {
        super(child, key, BUS_INPORT);
    }

    @Override
    public Schema getSchema() {
        return Warehouse.WAREHOUSE;
    }

    @Override
    public Identity<BusInportRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BUS_INPORT;
    }

    @Override
    public UniqueKey<BusInportRecord> getPrimaryKey() {
        return Keys.KEY_BUS_INPORT_PRIMARY;
    }

    @Override
    public List<UniqueKey<BusInportRecord>> getKeys() {
        return Arrays.<UniqueKey<BusInportRecord>>asList(Keys.KEY_BUS_INPORT_PRIMARY);
    }

    @Override
    public List<ForeignKey<BusInportRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BusInportRecord, ?>>asList(Keys.BUS_INPORT_IBFK_1, Keys.BUS_INPORT_IBFK_2);
    }

    public BusProvider busProvider() {
        return new BusProvider(this, Keys.BUS_INPORT_IBFK_1);
    }

    public BusGoods busGoods() {
        return new BusGoods(this, Keys.BUS_INPORT_IBFK_2);
    }

    @Override
    public BusInport as(String alias) {
        return new BusInport(DSL.name(alias), this);
    }

    @Override
    public BusInport as(Name alias) {
        return new BusInport(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BusInport rename(String name) {
        return new BusInport(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BusInport rename(Name name) {
        return new BusInport(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, LocalDateTime, String, Integer, String, Double, Integer, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
