/*
 * This file is generated by jOOQ.
 */
package code.generated.tables;


import code.generated.Keys;
import code.generated.Warehouse;
import code.generated.tables.records.BusProviderRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BusProvider extends TableImpl<BusProviderRecord> {

    private static final long serialVersionUID = 1539578229;

    /**
     * The reference instance of <code>warehouse.bus_provider</code>
     */
    public static final BusProvider BUS_PROVIDER = new BusProvider();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BusProviderRecord> getRecordType() {
        return BusProviderRecord.class;
    }

    /**
     * The column <code>warehouse.bus_provider.id</code>.
     */
    public final TableField<BusProviderRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>warehouse.bus_provider.providername</code>.
     */
    public final TableField<BusProviderRecord, String> PROVIDERNAME = createField(DSL.name("providername"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_provider.zip</code>.
     */
    public final TableField<BusProviderRecord, String> ZIP = createField(DSL.name("zip"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_provider.address</code>.
     */
    public final TableField<BusProviderRecord, String> ADDRESS = createField(DSL.name("address"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_provider.telephone</code>.
     */
    public final TableField<BusProviderRecord, String> TELEPHONE = createField(DSL.name("telephone"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_provider.connectionperson</code>.
     */
    public final TableField<BusProviderRecord, String> CONNECTIONPERSON = createField(DSL.name("connectionperson"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_provider.phone</code>.
     */
    public final TableField<BusProviderRecord, String> PHONE = createField(DSL.name("phone"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_provider.bank</code>.
     */
    public final TableField<BusProviderRecord, String> BANK = createField(DSL.name("bank"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_provider.account</code>.
     */
    public final TableField<BusProviderRecord, String> ACCOUNT = createField(DSL.name("account"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_provider.email</code>.
     */
    public final TableField<BusProviderRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_provider.fax</code>.
     */
    public final TableField<BusProviderRecord, String> FAX = createField(DSL.name("fax"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_provider.available</code>.
     */
    public final TableField<BusProviderRecord, Integer> AVAILABLE = createField(DSL.name("available"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>warehouse.bus_provider</code> table reference
     */
    public BusProvider() {
        this(DSL.name("bus_provider"), null);
    }

    /**
     * Create an aliased <code>warehouse.bus_provider</code> table reference
     */
    public BusProvider(String alias) {
        this(DSL.name(alias), BUS_PROVIDER);
    }

    /**
     * Create an aliased <code>warehouse.bus_provider</code> table reference
     */
    public BusProvider(Name alias) {
        this(alias, BUS_PROVIDER);
    }

    private BusProvider(Name alias, Table<BusProviderRecord> aliased) {
        this(alias, aliased, null);
    }

    private BusProvider(Name alias, Table<BusProviderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> BusProvider(Table<O> child, ForeignKey<O, BusProviderRecord> key) {
        super(child, key, BUS_PROVIDER);
    }

    @Override
    public Schema getSchema() {
        return Warehouse.WAREHOUSE;
    }

    @Override
    public Identity<BusProviderRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BUS_PROVIDER;
    }

    @Override
    public UniqueKey<BusProviderRecord> getPrimaryKey() {
        return Keys.KEY_BUS_PROVIDER_PRIMARY;
    }

    @Override
    public List<UniqueKey<BusProviderRecord>> getKeys() {
        return Arrays.<UniqueKey<BusProviderRecord>>asList(Keys.KEY_BUS_PROVIDER_PRIMARY);
    }

    @Override
    public BusProvider as(String alias) {
        return new BusProvider(DSL.name(alias), this);
    }

    @Override
    public BusProvider as(Name alias) {
        return new BusProvider(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BusProvider rename(String name) {
        return new BusProvider(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BusProvider rename(Name name) {
        return new BusProvider(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, String, String, String, String, String, String, String, String, String, Integer> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
