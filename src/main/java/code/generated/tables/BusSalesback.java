/*
 * This file is generated by jOOQ.
 */
package code.generated.tables;


import code.generated.Keys;
import code.generated.Warehouse;
import code.generated.tables.records.BusSalesbackRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BusSalesback extends TableImpl<BusSalesbackRecord> {

    private static final long serialVersionUID = 2035749366;

    /**
     * The reference instance of <code>warehouse.bus_salesback</code>
     */
    public static final BusSalesback BUS_SALESBACK = new BusSalesback();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BusSalesbackRecord> getRecordType() {
        return BusSalesbackRecord.class;
    }

    /**
     * The column <code>warehouse.bus_salesback.id</code>.
     */
    public final TableField<BusSalesbackRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>warehouse.bus_salesback.customerid</code>.
     */
    public final TableField<BusSalesbackRecord, Integer> CUSTOMERID = createField(DSL.name("customerid"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>warehouse.bus_salesback.paytype</code>.
     */
    public final TableField<BusSalesbackRecord, String> PAYTYPE = createField(DSL.name("paytype"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_salesback.salesbacktime</code>.
     */
    public final TableField<BusSalesbackRecord, LocalDateTime> SALESBACKTIME = createField(DSL.name("salesbacktime"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>warehouse.bus_salesback.salebackprice</code>.
     */
    public final TableField<BusSalesbackRecord, Double> SALEBACKPRICE = createField(DSL.name("salebackprice"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>warehouse.bus_salesback.operateperson</code>.
     */
    public final TableField<BusSalesbackRecord, String> OPERATEPERSON = createField(DSL.name("operateperson"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_salesback.number</code>.
     */
    public final TableField<BusSalesbackRecord, Integer> NUMBER = createField(DSL.name("number"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>warehouse.bus_salesback.remark</code>.
     */
    public final TableField<BusSalesbackRecord, String> REMARK = createField(DSL.name("remark"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.bus_salesback.goodsid</code>.
     */
    public final TableField<BusSalesbackRecord, Integer> GOODSID = createField(DSL.name("goodsid"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>warehouse.bus_salesback</code> table reference
     */
    public BusSalesback() {
        this(DSL.name("bus_salesback"), null);
    }

    /**
     * Create an aliased <code>warehouse.bus_salesback</code> table reference
     */
    public BusSalesback(String alias) {
        this(DSL.name(alias), BUS_SALESBACK);
    }

    /**
     * Create an aliased <code>warehouse.bus_salesback</code> table reference
     */
    public BusSalesback(Name alias) {
        this(alias, BUS_SALESBACK);
    }

    private BusSalesback(Name alias, Table<BusSalesbackRecord> aliased) {
        this(alias, aliased, null);
    }

    private BusSalesback(Name alias, Table<BusSalesbackRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> BusSalesback(Table<O> child, ForeignKey<O, BusSalesbackRecord> key) {
        super(child, key, BUS_SALESBACK);
    }

    @Override
    public Schema getSchema() {
        return Warehouse.WAREHOUSE;
    }

    @Override
    public Identity<BusSalesbackRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BUS_SALESBACK;
    }

    @Override
    public UniqueKey<BusSalesbackRecord> getPrimaryKey() {
        return Keys.KEY_BUS_SALESBACK_PRIMARY;
    }

    @Override
    public List<UniqueKey<BusSalesbackRecord>> getKeys() {
        return Arrays.<UniqueKey<BusSalesbackRecord>>asList(Keys.KEY_BUS_SALESBACK_PRIMARY);
    }

    @Override
    public BusSalesback as(String alias) {
        return new BusSalesback(DSL.name(alias), this);
    }

    @Override
    public BusSalesback as(Name alias) {
        return new BusSalesback(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BusSalesback rename(String name) {
        return new BusSalesback(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BusSalesback rename(Name name) {
        return new BusSalesback(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, String, LocalDateTime, Double, String, Integer, String, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
