/*
 * This file is generated by jOOQ.
 */
package code.generated.tables;


import code.generated.Keys;
import code.generated.Warehouse;
import code.generated.tables.records.SysPermissionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysPermission extends TableImpl<SysPermissionRecord> {

    private static final long serialVersionUID = -1099083432;

    /**
     * The reference instance of <code>warehouse.sys_permission</code>
     */
    public static final SysPermission SYS_PERMISSION = new SysPermission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysPermissionRecord> getRecordType() {
        return SysPermissionRecord.class;
    }

    /**
     * The column <code>warehouse.sys_permission.id</code>.
     */
    public final TableField<SysPermissionRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>warehouse.sys_permission.pid</code>.
     */
    public final TableField<SysPermissionRecord, Integer> PID = createField(DSL.name("pid"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>warehouse.sys_permission.type</code>. 权限类型[menu/permission]
     */
    public final TableField<SysPermissionRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "权限类型[menu/permission]");

    /**
     * The column <code>warehouse.sys_permission.title</code>.
     */
    public final TableField<SysPermissionRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.sys_permission.percode</code>. 权限编码[只有type= permission才有  user:view]
     */
    public final TableField<SysPermissionRecord, String> PERCODE = createField(DSL.name("percode"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "权限编码[只有type= permission才有  user:view]");

    /**
     * The column <code>warehouse.sys_permission.icon</code>.
     */
    public final TableField<SysPermissionRecord, String> ICON = createField(DSL.name("icon"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.sys_permission.href</code>.
     */
    public final TableField<SysPermissionRecord, String> HREF = createField(DSL.name("href"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.sys_permission.target</code>.
     */
    public final TableField<SysPermissionRecord, String> TARGET = createField(DSL.name("target"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>warehouse.sys_permission.open</code>.
     */
    public final TableField<SysPermissionRecord, Integer> OPEN = createField(DSL.name("open"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>warehouse.sys_permission.ordernum</code>.
     */
    public final TableField<SysPermissionRecord, Integer> ORDERNUM = createField(DSL.name("ordernum"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>warehouse.sys_permission.available</code>. 状态【0不可用1可用】
     */
    public final TableField<SysPermissionRecord, Integer> AVAILABLE = createField(DSL.name("available"), org.jooq.impl.SQLDataType.INTEGER, this, "状态【0不可用1可用】");

    /**
     * Create a <code>warehouse.sys_permission</code> table reference
     */
    public SysPermission() {
        this(DSL.name("sys_permission"), null);
    }

    /**
     * Create an aliased <code>warehouse.sys_permission</code> table reference
     */
    public SysPermission(String alias) {
        this(DSL.name(alias), SYS_PERMISSION);
    }

    /**
     * Create an aliased <code>warehouse.sys_permission</code> table reference
     */
    public SysPermission(Name alias) {
        this(alias, SYS_PERMISSION);
    }

    private SysPermission(Name alias, Table<SysPermissionRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysPermission(Name alias, Table<SysPermissionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SysPermission(Table<O> child, ForeignKey<O, SysPermissionRecord> key) {
        super(child, key, SYS_PERMISSION);
    }

    @Override
    public Schema getSchema() {
        return Warehouse.WAREHOUSE;
    }

    @Override
    public Identity<SysPermissionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SYS_PERMISSION;
    }

    @Override
    public UniqueKey<SysPermissionRecord> getPrimaryKey() {
        return Keys.KEY_SYS_PERMISSION_PRIMARY;
    }

    @Override
    public List<UniqueKey<SysPermissionRecord>> getKeys() {
        return Arrays.<UniqueKey<SysPermissionRecord>>asList(Keys.KEY_SYS_PERMISSION_PRIMARY);
    }

    @Override
    public SysPermission as(String alias) {
        return new SysPermission(DSL.name(alias), this);
    }

    @Override
    public SysPermission as(Name alias) {
        return new SysPermission(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysPermission rename(String name) {
        return new SysPermission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysPermission rename(Name name) {
        return new SysPermission(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Integer, String, String, String, String, String, String, Integer, Integer, Integer> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
