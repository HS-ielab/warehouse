/*
 * This file is generated by jOOQ.
 */
package code.generated.tables.records;


import code.generated.tables.SysRolePermission;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysRolePermissionRecord extends UpdatableRecordImpl<SysRolePermissionRecord> implements Record2<Integer, Integer> {

    private static final long serialVersionUID = -46478439;

    /**
     * Setter for <code>warehouse.sys_role_permission.rid</code>.
     */
    public void setRid(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>warehouse.sys_role_permission.rid</code>.
     */
    public Integer getRid() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>warehouse.sys_role_permission.pid</code>.
     */
    public void setPid(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>warehouse.sys_role_permission.pid</code>.
     */
    public Integer getPid() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return SysRolePermission.SYS_ROLE_PERMISSION.RID;
    }

    @Override
    public Field<Integer> field2() {
        return SysRolePermission.SYS_ROLE_PERMISSION.PID;
    }

    @Override
    public Integer component1() {
        return getRid();
    }

    @Override
    public Integer component2() {
        return getPid();
    }

    @Override
    public Integer value1() {
        return getRid();
    }

    @Override
    public Integer value2() {
        return getPid();
    }

    @Override
    public SysRolePermissionRecord value1(Integer value) {
        setRid(value);
        return this;
    }

    @Override
    public SysRolePermissionRecord value2(Integer value) {
        setPid(value);
        return this;
    }

    @Override
    public SysRolePermissionRecord values(Integer value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SysRolePermissionRecord
     */
    public SysRolePermissionRecord() {
        super(SysRolePermission.SYS_ROLE_PERMISSION);
    }

    /**
     * Create a detached, initialised SysRolePermissionRecord
     */
    public SysRolePermissionRecord(Integer rid, Integer pid) {
        super(SysRolePermission.SYS_ROLE_PERMISSION);

        set(0, rid);
        set(1, pid);
    }
}
